package com.neo.thirteen;import java.util.Arrays;import java.util.Comparator;/** * Created by cainiao on 2020-08-22 14:50 * 函数式接口当返回值 */public class FunctionalInterface2 {    /**     * 定义一个方法，方法的返回值类型是函数式接口Comparator     * @return     */    public static Comparator<String> getComparatorAnonymous(){        //方法的返回值类型是一个接口，可以返回这个接口的匿名内部类        return new Comparator<String>() {            @Override            public int compare(String o1, String o2) {                return o1.length()-o2.length();            }        };    }    public static Comparator<String> getComparatorLambda(){        //方法的返回值类型是一个接口，也可以返回一个Lambda表达式        return (o1,o2)->o1.length()-o2.length();    }    public static void main(String[] args) {        anoymousSort();        lambdaSort();    }    private static void lambdaSort() {        String[] arrays = {"dddd","a","ccc","bb"};        System.out.println("排序前："+ Arrays.toString(arrays));        Arrays.sort(arrays,getComparatorLambda());        System.out.println("lambda排序后："+ Arrays.toString(arrays));    }    private static void anoymousSort() {        String[] arrays = {"dddd","a","ccc","bb"};        System.out.println("排序前："+ Arrays.toString(arrays));        Arrays.sort(arrays,getComparatorAnonymous());        System.out.println("匿名内部类排序后："+ Arrays.toString(arrays));    }}