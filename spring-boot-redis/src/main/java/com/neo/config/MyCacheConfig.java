package com.neo.config;import com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.cache.CacheProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.serializer.RedisSerializationContext;import org.springframework.data.redis.serializer.StringRedisSerializer;/** * Created by cainiao on 2020-08-23 20:29 * {@link org.springframework.boot.autoconfigure.cache.CacheProperties} *///@ConfigurationProperties(prefix = "spring.cache")@EnableConfigurationProperties(CacheProperties.class)@EnableCaching@Configurationpublic class MyCacheConfig {    /**     * 使用方式一，因为已经导入到容器里了，可直接使用     * 使用方式二，直接当成redisCacheConfiguration方法的参数     */    @Autowired    private CacheProperties cacheProperties;    /**     * 为什么配置文件设置的过期时间没有生效呢？     * 因为{@link CacheProperties}没有放到容器中。     * 我们需要拿到他，获取他的值，原来是这样绑定的@ConfigurationProperties(prefix = "spring.cache")     * 我们这样做：@EnableConfigurationProperties(CacheProperties.class)     * @EnableConfigurationProperties 开启属性配置的绑定功能，绑定到哪个类呢？CacheProperties.class     *     *     * @return     */    @Bean    public RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties){        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()));        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericFastJsonRedisSerializer()));        //将配置文件中的配置生效        CacheProperties.Redis redisProperties = cacheProperties.getRedis();        if (redisProperties.getTimeToLive() != null) {            config = config.entryTtl(redisProperties.getTimeToLive());        }        if (redisProperties.getKeyPrefix() != null) {            config = config.prefixKeysWith(redisProperties.getKeyPrefix());        }        if (!redisProperties.isCacheNullValues()) {            config = config.disableCachingNullValues();        }        if (!redisProperties.isUseKeyPrefix()) {            config = config.disableKeyPrefix();        }        return config;    }}