package com.neo.study;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;/** * Created by cainiao on 2020-08-30 17:53 * CompletableFuture 异步编排测试类 * */public class CompletableFutureTwoTest extends CompletableFutureBase{    public static void main(String[] args) throws Exception{        System.out.println("main.....start");//        public CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)//        public CompletionStage<T> whenCompleteAsync (BiConsumer<? super T, ? super Throwable> action);//        public CompletionStage<T> whenCompleteAsync (BiConsumer<? super T, ? super Throwable> action, Executor executor);//        public CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn)        CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {            int num = 10 / 1;            System.out.println("supplyAsync 当前线程id " + Thread.currentThread().getId() + Thread.currentThread().getName());            return num;        }, executorStatic).whenCompleteAsync((t,u)->{            System.out.println("whenComplete1 当前线程id " + Thread.currentThread().getId() + Thread.currentThread().getName());            System.out.println("whenCompleteAsync1---"+u.getMessage());        }).whenCompleteAsync((t,u)->{            System.out.println("whenComplete2 当前线程id " + Thread.currentThread().getId() + Thread.currentThread().getName());            System.out.println("whenCompleteAsync2---"+u.getMessage());        }).exceptionally(u -> {            return null;        });        Integer integer = future.get();        System.out.println(integer);        System.out.println("main.....end");    }}