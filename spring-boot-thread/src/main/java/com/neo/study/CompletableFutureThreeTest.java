package com.neo.study;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;/** * Created by cainiao on 2020-08-30 17:53 * CompletableFuture 异步编排测试类 * */public class CompletableFutureThreeTest extends CompletableFutureBase{    public static void main(String[] args) throws Exception{        System.out.println("main.....start");//        public <U> CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)//        public <U> CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn);//        public <U> CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor);        CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {            System.out.println("CompletableFuture当前线程id " + Thread.currentThread().getId()+" name: " +Thread.currentThread().getName());            int num = 10 / 0;            return num;        }, executorStatic).handleAsync((u,v)->{            System.out.println("handleAsync当前线程id " + Thread.currentThread().getId()+" name: " +Thread.currentThread().getName());            if (u!=null){                return u*5;            }            if (v !=null){                return 0;            }            return 999;        });        Integer integer = future.get();        System.out.println("main.....end:"+integer);    }}