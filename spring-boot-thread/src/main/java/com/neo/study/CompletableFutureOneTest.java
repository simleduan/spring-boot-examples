package com.neo.study;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;/** * Created by cainiao on 2020-08-30 17:53 * CompletableFuture 异步编排测试类 * */public class CompletableFutureOneTest extends CompletableFutureBase{    public static void main(String[] args) throws Exception{        System.out.println("main.....start");        //无返回值//        runAsyncTest();        //有返回值        Integer integer = supplyAsync();        System.out.println(integer);        System.out.println("main.....end");    }    private static Integer supplyAsync() throws ExecutionException, InterruptedException {        //        public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)        //        public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,Executor executor)        CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {            System.out.println("当前线程id " + Thread.currentThread().getId());            int num = 10 / 2;            System.out.println("运算结果 " + num);            return num;        }, executorStatic);        Integer integer = future.get();        return integer;    }    private static void runAsyncTest() throws ExecutionException, InterruptedException {        //        public static CompletableFuture<Void> runAsync(Runnable runnable)        //        public static CompletableFuture<Void> runAsync(Runnable runnable,Executor executor)        CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {            System.out.println("当前线程id " + Thread.currentThread().getId());            int num = 10 / 2;            System.out.println("运算结果 " + num);        }, executorStatic);    }}